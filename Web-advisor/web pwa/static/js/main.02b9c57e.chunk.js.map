{"version":3,"sources":["Today/Today.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["Today","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","axios","get","then","response","setState","btcprice","data","BTC","USD","localStorage","setItem","ethprice","ETH","ltcprice","LTC","catch","error","console","log","state","_this2","navigator","onLine","getItem","setInterval","react_default","a","createElement","className","Component","History","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","bind","assertThisInitialized","getETHPrices","getLTCPrices","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","JSON","stringify","_this3","subtract","_this4","_this5","_this6","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","parse","App","href","target","rel","src_Today_Today","History_History_History","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.02b9c57e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Today.css'\r\nimport axios from 'axios'\r\n\r\nclass Today extends Component {\r\n  // Adds a class constructor that assigns the initial state values:\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      btcprice: '',\r\n      ltcprice: '',\r\n      ethprice: ''\r\n    };\r\n  }\r\n\r\n  fetchData = () => {\r\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n      .then(response => {\r\n        this.setState({ btcprice: response.data.BTC.USD });\r\n        localStorage.setItem('BTC', response.data.BTC.USD);\r\n        this.setState({ ethprice: response.data.ETH.USD });\r\n        localStorage.setItem('ETH', response.data.ETH.USD);\r\n        this.setState({ ltcprice: response.data.LTC.USD });\r\n        localStorage.setItem('LTC', response.data.LTC.USD);\r\n      })\r\n      .catch(error => {\r\n          console.log(error)\r\n    })\r\n  }\r\n  componentWillMount() {\r\n    this.fetchData();\r\n  }\r\n  componentDidMount () {\r\n    if (!navigator.onLine) {\r\n      this.setState({ btcprice: localStorage.getItem('BTC') });\r\n      this.setState({ ethprice: localStorage.getItem('ETH') });\r\n      this.setState({ ltcprice: localStorage.getItem('LTC') });\r\n    }\r\n    setInterval(() => {\r\n      this.fetchData();\r\n    }, 10000)\r\n }\r\n\r\n  // The render method contains the JSX code which will be compiled to HTML.\r\n  render() {\r\n    return (\r\n      <div className=\"today--section container\">\r\n        <h2>Current Price</h2>\r\n        <div className=\"columns today--section__box\">\r\n          <div className=\"column btc--section\">\r\n            <h5>${this.state.btcprice}</h5>\r\n            <p>1 BTC</p>\r\n          </div>\r\n          <div className=\"column eth--section\">\r\n            <h5>${this.state.ethprice}</h5>\r\n            <p>1 ETH</p>\r\n          </div>\r\n          <div className=\"column ltc--section\">\r\n            <h5>${this.state.ltcprice}</h5>\r\n            <p>1 LTC</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Today;","import React, { Component } from 'react';\r\nimport './History.css'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\nexport default class History extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n        todayprice: {},\r\n        yesterdayprice: {},\r\n        twodaysprice: {},\r\n        threedaysprice: {},\r\n        fourdaysprice: {}\r\n    }\r\n    this.getBTCPrices = this.getBTCPrices.bind(this);\r\n    this.getETHPrices = this.getETHPrices.bind(this);\r\n    this.getLTCPrices = this.getLTCPrices.bind(this);\r\n  }\r\n  // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\r\n  getETHPrices (date) {\r\n      return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\r\n  }\r\n  // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\r\n  getBTCPrices (date) {\r\n      return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\r\n  }\r\n  // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\r\n  getLTCPrices (date) {\r\n      return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\r\n  }\r\n\r\n  // This function gets the prices for the current date.\r\n  getTodayPrice () {\r\n    // Get today's date in timestamp\r\n    let t = moment().unix()\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(axios.spread((eth, btc, ltc) => {\r\n        let f = {\r\n          date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n          eth: eth.data.ETH.USD,\r\n          btc: btc.data.BTC.USD,\r\n          ltc: ltc.data.LTC.USD\r\n        }\r\n        // Set the state of todayprice to the content of the object f\r\n        this.setState({ todayprice: f });\r\n        localStorage.setItem('todayprice', JSON.stringify(f));\r\n    }));\r\n  }\r\n  // This function gets the prices for the yesterday.\r\n  getYesterdayPrice () {\r\n    // Get yesterday's date in timestamp\r\n    let t = moment().subtract(1, 'days').unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(axios.spread((eth, btc, ltc) => {\r\n        let f = {\r\n          date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n          eth: eth.data.ETH.USD,\r\n          btc: btc.data.BTC.USD,\r\n          ltc: ltc.data.LTC.USD\r\n        }\r\n        // Set the state of yesterdayprice to the content of the object f\r\n        this.setState({ yesterdayprice: f });\r\n        localStorage.setItem('yesterdayprice', JSON.stringify(f));\r\n      }));\r\n  }\r\n  // This function gets the prices for the two days ago.\r\n  getTwoDaysPrice () {\r\n    // Get the date for two days ago in timestamp\r\n    let t = moment().subtract(2, 'days').unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(axios.spread((eth, btc, ltc) => {\r\n        let f = {\r\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n            eth: eth.data.ETH.USD,\r\n            btc: btc.data.BTC.USD,\r\n            ltc: ltc.data.LTC.USD\r\n        }\r\n        // Set the state of twodaysprice to the content of the object f\r\n        this.setState({ twodaysprice: f });\r\n        localStorage.setItem('twodaysprice', JSON.stringify(f));\r\n      }));\r\n  }\r\n  // This function gets the prices for the three days ago.\r\n  getThreeDaysPrice () {\r\n    // Get the date for three days ago in timestamp\r\n    let t = moment().subtract(3, 'days').unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(axios.spread((eth, btc, ltc) => {\r\n        let f = {\r\n          date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n          eth: eth.data.ETH.USD,\r\n          btc: btc.data.BTC.USD,\r\n          ltc: ltc.data.LTC.USD\r\n        }\r\n        // Set the state of threedaysprice to the content of the object f\r\n        this.setState({ threedaysprice: f });\r\n        localStorage.setItem('threedaysprice', JSON.stringify(f));\r\n      }));\r\n  }\r\n  // This function gets the prices for the four days ago.\r\n  getFourDaysPrice () {\r\n    // Get the date for four days ago in timestamp\r\n    let t = moment().subtract(4, 'days').unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(axios.spread((eth, btc, ltc) => {\r\n        let f = {\r\n          date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n          eth: eth.data.ETH.USD,\r\n          btc: btc.data.BTC.USD,\r\n          ltc: ltc.data.LTC.USD\r\n        }\r\n        // Set the state of fourdaysprice to the content of the object f\r\n        this.setState({ fourdaysprice: f });\r\n        localStorage.setItem('fourdaysprice', JSON.stringify(f));\r\n      }));\r\n  }\r\n  // This is called when an instance of a component is being created and inserted into the DOM.\r\n  componentWillMount () {\r\n    this.getTodayPrice();\r\n    this.getYesterdayPrice();\r\n    this.getTwoDaysPrice();\r\n    this.getThreeDaysPrice();\r\n    this.getFourDaysPrice();\r\n  }\r\n  componentDidMount () {\r\n    if (!navigator.onLine) {\r\n      this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\r\n      this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\r\n      this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\r\n      this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\r\n      this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"history--section container\">\r\n        <h2>History (Past 5 days)</h2>\r\n        <div className=\"history--section__box\">\r\n          <div className=\"history--section__box__inner\">\r\n            <h4>{this.state.todayprice.date}</h4>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <p>1 BTC = ${this.state.todayprice.btc}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 ETH = ${this.state.todayprice.eth}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 LTC = ${this.state.todayprice.ltc}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n            <div className=\"history--section__box__inner\">\r\n              <h4>{this.state.yesterdayprice.date}</h4>\r\n              <div className=\"columns\">\r\n                <div className=\"column\">\r\n                  <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"history--section__box__inner\">\r\n              <h4>{this.state.twodaysprice.date}</h4>\r\n              <div className=\"columns\">\r\n                <div className=\"column\">\r\n                  <p>1 BTC = ${this.state.twodaysprice.btc}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 ETH = ${this.state.twodaysprice.eth}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"history--section__box__inner\">\r\n              <h4>{this.state.threedaysprice.date}</h4>\r\n              <div className=\"columns\">\r\n                <div className=\"column\">\r\n                  <p>1 BTC = ${this.state.threedaysprice.btc}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 ETH = ${this.state.threedaysprice.eth}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"history--section__box__inner\">\r\n              <h4>{this.state.fourdaysprice.date}</h4>\r\n              <div className=\"columns\">\r\n                <div className=\"column\">\r\n                  <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// Import React and Component\nimport React, { Component } from 'react';\n// Import CSS from App.css\nimport './App.css';\n// Import the Today component to be used below\nimport Today from './Today/Today'\n// Import the History component to be used below\nimport History from './History/History'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n          <div className=\"topheader\">\n              <header className=\"container\">\n                  <nav className=\"navbar\">\n                      <div className=\"navbar-brand\">\n                          <span className=\"navbar-item\">PusherCoins</span>\n                      </div>\n                      <div className=\"navbar-end\">\n                          <a className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\">Pusher.com</a>\n                      </div>\n                  </nav>\n              </header>\n          </div>\n          <section className=\"results--section\">\n              <div className=\"container\">\n                  <h1>PusherCoins is a realtime price information about<br></br> BTC, ETH and LTC.</h1>\n              </div>\n              <div className=\"results--section__inner\">\n                  <Today />\n                  <History />\n              </div>\n          </section>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}